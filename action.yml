name: 'Deploy app to Shopify Oxygen'
branding:
  icon: shopping-bag
  colour: green
description: 'Deploy JavaScript applications to Shopify Oxygen directly from GitHub'
inputs:
  build_command:
    description: The build command to execute; OXYGEN_ASSET_BASE_URL is available as a reference to Shopify's CDN for this command
    required: true
  commit_message:
    description: The message of the commit
    default: ${{ github.event.head_commit.message }}
    required: true
  commit_timestamp:
    description: The timestamp of the commit
    default: ${{ github.event.head_commit.timestamp }}
    required: true
  oxygen_deployment_token:
    description: The JWT deployment token
    required: true
  oxygen_worker_dir:
    description: The name of the directory containing the worker file
    default: dist/worker
  oxygen_client_dir:
    description: The name of the directory with compiled client files
    default: dist/client
  oxygen_health_check:
    description: Ensure the application is reachable on Oxygen marking deployment as successful? (`true` or `false`)
    default: false
  path:
    description: The root path of the project to deploy
outputs:
  url:
    description: URL of the deployment
    value: ${{ steps.oxygenctl-action.outputs.url || steps.oxygen-cli-action.outputs.url }}
runs:
  using: 'composite'
  steps:
    - name: Check Oxygen version
      shell: 'bash'
      id: check_version
      run: |
        TOKEN="${{ inputs.oxygen_deployment_token }}"
        echo "::add-mask::$TOKEN"
        delimiter=":"
        token_list=()
        while read -r -d "$delimiter" token; do
          token_list+=("$token")
        done <<< "${TOKEN}${delimiter}"

        if [ "${#token_list[@]}" -gt 1 ]; then
          echo "Double deployment..."
          v1_token=${token_list[0]}
          v2_token=${token_list[1]}
          echo "::add-mask::$v1_token"
          echo "::add-mask::$v2_token"
          echo "v1_token=$v1_token" >> $GITHUB_OUTPUT
          echo "v2_token=$v2_token" >> $GITHUB_OUTPUT

          set +e
          shop_id=$(echo "${v2_token}" | base64 -d | jq -r '.namespace')
          echo "Fetching configuration for shop $shop_id..."
          hydrogen_configuration_url="${UNSAFE_HYDROGEN_CONFIGURATION_URL:-https://hydrogen-storefronts.shopifyapps.com}"
          configuration_response=$(curl -s -f "${hydrogen_configuration_url}/api/admin/configuration/shop/${shop_id}" | jq .deployment 2>/dev/null)
          set -e

          if test -z "$configuration_response"; then
            echo "Defaulting to V1 due to the configuration response being empty..."
            echo "IS_V1=true" >> $GITHUB_ENV
            echo "PRIORITY=v1" >> $GITHUB_ENV
          else
            echo "Preparing deployment based on configuration response..."
            priority=$(echo "$configuration_response" | jq -r .priority)
            echo "PRIORITY=${priority}" >> $GITHUB_ENV

            echo "IS_V2=$(echo "$configuration_response" | jq -r .v2_enabled)" >> $GITHUB_ENV
            echo "IS_V1=$(echo "$configuration_response" | jq -r .v1_enabled)" >> $GITHUB_ENV
          fi
        else
          echo "Single deployment..."

          if [[ "${TOKEN}" =~ ^[A-Za-z0-9+/]+[=]{0,2}$ ]]; then
            echo "Token is in V2 format..."
            echo "IS_V2=true" >> $GITHUB_ENV
            echo "PRIORITY=v2" >> $GITHUB_ENV
            echo "v2_token=${TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "Token is in V1 format..."
            echo "IS_V1=true" >> $GITHUB_ENV
            echo "PRIORITY=v1" >> $GITHUB_ENV
            echo "v1_token=${TOKEN}" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Build and Publish to Oxygen
      shell: 'bash'
      id: 'oxygenctl-action'
      if: always()
      env:
        OXYGEN_ASSETS_DIR: ${{ inputs.oxygen_client_dir }}
        OXYGEN_BUILD_COMMAND: ${{ inputs.build_command }}
        OXYGEN_COMMIT_MESSAGE: ${{ inputs.commit_message || 'No commit message' }}
        OXYGEN_WORKFLOW_ID: "${{ github.run_id }}_${{ github.run_attempt }}"
        OXYGEN_WORKER_DIR: ${{ inputs.oxygen_worker_dir }}
      run: |
        [[ -n "${{ inputs.path }}" ]] && cd "${{ inputs.path }}";

        if [ "${{ env.IS_V2 }}" == "true" ]; then
          echo "Deploying to Oxygen V2..."
          [[ "${{ env.PRIORITY }}" == "v1" ]] && v2_silence_logs="&> /dev/null"
          mkdir oxygen_v2
          yarn global add @shopify/oxygen-cli@latest
          rsync -a ./* ./oxygen_v2/ --exclude 'oxygen_v2' --exclude 'node_modules'
          echo "v2_url=$(cd oxygen_v2 && ln -s ../node_modules node_modules && oxygen-cli oxygen:deploy \
              --path=${{ inputs.path }} \
              --assetsFolder=${{ inputs.oxygen_client_dir }} \
              --workerFolder=${{ inputs.oxygen_worker_dir }} \
              --token=${{ steps.check_version.outputs.v2_token }})" >> v2_output &
        fi

        if [ "${{ env.IS_V1 }}" == "true" ]; then
          echo "Deploying to Oxygen V1..."
          [[ -z "${{ inputs.commit_timestamp }}" ]] && export OXYGEN_COMMIT_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ") || export OXYGEN_COMMIT_TIMESTAMP=${{ inputs.commit_timestamp }};
          echo "v1_url=$(OXYGEN_DEPLOYMENT_TOKEN=${{ steps.check_version.outputs.v1_token }} $GITHUB_ACTION_PATH/oxygenctl deploy \
              --health-check=${{ inputs.oxygen_health_check }})" >> v1_output &
        fi

        wait

        if [[ "${{ env.IS_V2 }}" == "true" && "${{ env.PRIORITY }}" == "v2" ]]; then
          cat v2_output
          echo "url=$(grep -oP 'v2_url=\K.*' v2_output)" >> $GITHUB_OUTPUT
        else
          cat v1_output
          echo "url=$(grep -oP 'v1_url=\K.*' v1_output)" >> $GITHUB_OUTPUT
        fi
