name: 'Deploy app to Shopify Oxygen'
branding:
  icon: shopping-bag
  colour: green
description: 'Deploy JavaScript applications to Shopify Oxygen directly from GitHub'
inputs:
  build_command:
    description: The build command to execute; OXYGEN_ASSET_BASE_URL is available as a reference to Shopify's CDN for this command
    required: true
  commit_message:
    description: The message of the commit
    default: ${{ github.event.head_commit.message }}
    required: true
  commit_timestamp:
    description: The timestamp of the commit
    default: ${{ github.event.head_commit.timestamp }}
    required: true
  oxygen_deployment_token:
    description: The JWT deployment token
    required: true
  oxygen_worker_dir:
    description: The name of the directory containing the worker file
    default: dist/worker
  oxygen_client_dir:
    description: The name of the directory with compiled client files
    default: dist/client
  oxygen_deployment_verification:
    description: Verify the worker deployment to Oxygen has been completed (`true` or `false`)
    default: true
  oxygen_deployment_verification_max_duration:
    description: The maximum duration in seconds to wait for the health check to pass
    default: 180
  path:
    description: The root path of the project to deploy
outputs:
  url:
    description: URL of the deployment
    value: ${{ steps.oxygen-cli-action.outputs.url }}
  auth_bypass_token:
    description: An auth bypass token used for end-to-end testing
    value: ${{ steps.oxygen-cli-action.outputs.auth_bypass_token }}
runs:
  using: 'composite'
  steps:
    - name: Check Oxygen version
      shell: 'bash'
      id: check_version
      run: |
        TOKEN="${{ inputs.oxygen_deployment_token }}"
        echo "::add-mask::$TOKEN"

        if [[ "${TOKEN}" == *":"* ]]; then
          echo "Multi token"
          IFS=':' read -ra token_list <<< "${TOKEN}"
          token=${token_list[1]}
          echo "::add-mask::$token"
          echo "token=$token" >> $GITHUB_OUTPUT
        else
          if [[ "${TOKEN}" =~ ^[A-Za-z0-9+/]+[=]{0,2}$ ]]; then
            echo "Token is in V2 format"
            echo "token=${TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "Your repository is out of date, please disconnect and reconnect your storefront on Shopify"
            exit 1
          fi
        fi

    - name: Build and Publish to Oxygen
      shell: 'bash'
      id: 'oxygen-cli-action'
      env:
        NODE_ENV: production
      run: |
        echo "Deploying to Oxygen..."
        build_command_filtered=$(echo '${{ inputs.build_command }}' | sed 's/HYDROGEN_ASSET_BASE_URL=$OXYGEN_ASSET_BASE_URL //g')
        oxygen_command="npm exec --package=@shopify/oxygen-cli@4 -- oxygen-cli oxygen:deploy \
              --path=${{ inputs.path }} \
              --assetsFolder=${{ inputs.oxygen_client_dir }} \
              --workerFolder=${{ inputs.oxygen_worker_dir }} \
              --verificationMaxDuration=${{ inputs.oxygen_deployment_verification_max_duration }} \
              --token=${{ steps.check_version.outputs.token }}"
        if [ "${{ inputs.oxygen_deployment_verification }}" == "false" ]; then
          oxygen_command+=" --skipVerification"
        fi

        output=$($oxygen_command --buildCommand="${build_command_filtered}")
        exit_code=$?

        if [ $exit_code -ne 0 ]; then
          exit $exit_code
        fi

        echo "url=$(jq -r '.url' <<<"$output")" >> "$GITHUB_OUTPUT"

        has_token=$(jq 'has("authBypassToken")' <<<"$output")

        if [ "$has_token" == 'true' ]; then
          echo "auth_bypass_token=$(jq -r '.authBypassToken' <<<"$output")" >> "$GITHUB_OUTPUT"
        fi
