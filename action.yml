name: 'Deploy app to Shopify Oxygen'
branding:
  icon: shopping-bag
  colour: green
description: 'Deploy JavaScript applications to Shopify Oxygen directly from GitHub'
inputs:
  build_command:
    description: The build command to execute; OXYGEN_ASSET_BASE_URL is available as a reference to Shopify's CDN for this command
    required: true
  commit_message:
    description: The message of the commit
    default: ${{ github.event.head_commit.message }}
    required: true
  commit_timestamp:
    description: The timestamp of the commit
    default: ${{ github.event.head_commit.timestamp }}
    required: true
  oxygen_deployment_token:
    description: The JWT deployment token
    required: true
  oxygen_worker_dir:
    description: The name of the directory containing the worker file
    default: dist/worker
  oxygen_client_dir:
    description: The name of the directory with compiled client files
    default: dist/client
  oxygen_deployment_verification:
    description: Verify the worker deployment to Oxygen has been completed (`true` or `false`)
    default: true
  oxygen_deployment_verification_max_duration:
    description: The maximum duration in seconds to wait for the health check to pass
    default: 180
  path:
    description: The root path of the project to deploy
outputs:
  url:
    description: URL of the deployment
    value: ${{ steps.oxygenctl-action.outputs.url || steps.oxygen-cli-action.outputs.url }}
runs:
  using: 'composite'
  steps:
    - name: Check Oxygen version
      shell: 'bash'
      id: check_version
      run: |
        TOKEN="${{ inputs.oxygen_deployment_token }}"
        echo "::add-mask::$TOKEN"

        if [[ "${TOKEN}" == *":"* ]]; then
          echo "Multi deployment"
          IFS=':' read -ra token_list <<< "${TOKEN}"
          v1_token=${token_list[0]}
          v2_token=${token_list[1]}
          echo "::add-mask::$v1_token"
          echo "::add-mask::$v2_token"
          echo "v1_token=$v1_token" >> $GITHUB_OUTPUT
          echo "v2_token=$v2_token" >> $GITHUB_OUTPUT

          set +e
          shop_id=$(echo "${v2_token}" | base64 -d | jq -r '.namespace')
          echo "Fetching configuration for shop $shop_id"
          hydrogen_configuration_url="${UNSAFE_HYDROGEN_CONFIGURATION_URL:-https://hydrogen-storefronts.shopifyapps.com}"
          configuration_response=$(curl -s -f "${hydrogen_configuration_url}/api/admin/configuration/shop/${shop_id}" | jq .deployment 2>/dev/null)
          set -e

          if [[ -z "$configuration_response" ]]; then
            echo "Configuration response is empty"
            echo "IS_V1=true" >> $GITHUB_ENV
            echo "PRIORITY=v1" >> $GITHUB_ENV
          else
            priority=$(echo "$configuration_response" | jq -r .priority)
            echo "PRIORITY=${priority}" >> $GITHUB_ENV
            echo "IS_V2=$(echo "$configuration_response" | jq -r .v2_enabled)" >> $GITHUB_ENV
            echo "IS_V1=$(echo "$configuration_response" | jq -r .v1_enabled)" >> $GITHUB_ENV
          fi
        else
          if [[ "${TOKEN}" =~ ^[A-Za-z0-9+/]+[=]{0,2}$ ]]; then
            echo "Token is in V2 format"
            echo "IS_V2=true" >> $GITHUB_ENV
            echo "PRIORITY=v2" >> $GITHUB_ENV
            echo "v2_token=${TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "Token is in V1 format"
            echo "IS_V1=true" >> $GITHUB_ENV
            echo "PRIORITY=v1" >> $GITHUB_ENV
            echo "v1_token=${TOKEN}" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Build and Publish to Oxygen
      shell: 'bash'
      id: 'oxygenctl-action'
      env:
        OXYGEN_ASSETS_DIR: ${{ inputs.oxygen_client_dir }}
        OXYGEN_BUILD_COMMAND: ${{ inputs.build_command }}
        OXYGEN_COMMIT_MESSAGE: ${{ inputs.commit_message || 'No commit message' }}
        OXYGEN_WORKFLOW_ID: "${{ github.run_id }}_${{ github.run_attempt }}"
        OXYGEN_WORKER_DIR: ${{ inputs.oxygen_worker_dir }}
        NODE_ENV: production
      run: |
        [[ -n "${{ inputs.path }}" ]] && cd "${{ inputs.path }}"

        # We need to run multiple processes at once and are going to handle
        # exiting manually
        set +e

        pids=()

        if [ "${{ env.IS_V2 }}" == "true" ]; then
          mkdir oxygen_v2
          rsync -a ./ ./oxygen_v2/ --exclude 'oxygen_v2' --exclude 'node_modules'
          {
            echo "Deploying to Oxygen..."
            build_command_filtered=$(echo '${{ inputs.build_command }}' | sed 's/HYDROGEN_ASSET_BASE_URL=$OXYGEN_ASSET_BASE_URL //g')
            oxygen_v2_command="npx @shopify/oxygen-cli@latest oxygen:deploy \
                  --path=${{ inputs.path }} \
                  --assetsFolder=${{ inputs.oxygen_client_dir }} \
                  --workerFolder=${{ inputs.oxygen_worker_dir }} \
                  --verificationMaxDuration=${{ inputs.oxygen_deployment_verification_max_duration }} \
                  --token=${{ steps.check_version.outputs.v2_token }}"
            if [ "${{ inputs.oxygen_deployment_verification }}" == "false" ]; then
              oxygen_v2_command+=" --skipVerification"
            fi

            if [[ "${{ env.PRIORITY }}" == "v2" ]]; then
              output=$(cd oxygen_v2 && ln -s ../node_modules node_modules && $oxygen_v2_command --buildCommand="${build_command_filtered}")
              exit_code=$?

              if [ $exit_code -eq 0 ]; then
                echo "url=$output" >> $GITHUB_OUTPUT
              else
                exit $exit_code
              fi
            else
              $(cd oxygen_v2 && ln -s ../node_modules node_modules && $oxygen_v2_command --buildCommand="${build_command_filtered}" &> /dev/null)
            fi
          } &
          pids+=($!)
          if [[ "${{ env.PRIORITY }}" == "v2" ]]; then
            priority_pid=$!
          fi
        fi

        if [ "${{ env.IS_V1 }}" == "true" ]; then
          {
            echo "Deploying to Oxygen..."
            [[ -z "${{ inputs.commit_timestamp }}" ]] && export OXYGEN_COMMIT_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ") || export OXYGEN_COMMIT_TIMESTAMP=${{ inputs.commit_timestamp }}
            oxygen_v1_command="$GITHUB_ACTION_PATH/oxygenctl deploy --deployment-verification=${{ inputs.oxygen_deployment_verification }}"

            if [[ "${{ env.PRIORITY }}" == "v1" ]]; then
              output=$(OXYGEN_DEPLOYMENT_TOKEN=${{ steps.check_version.outputs.v1_token }} $oxygen_v1_command)
              exit_code=$?

              if [ $exit_code -eq 0 ]; then
                echo "url=$output" >> $GITHUB_OUTPUT
              else
                exit $exit_code
              fi
            else
              $(OXYGEN_DEPLOYMENT_TOKEN=${{ steps.check_version.outputs.v1_token }} $oxygen_v1_command &> /dev/null)
            fi
          } &
          pids+=($!)
          if [[ "${{ env.PRIORITY }}" == "v1" ]]; then
            priority_pid=$!
          fi
        fi

        priority_exit_code=0

        for pid in ${pids[*]}; do
          wait $pid
          exit_status=$?

          if [ $pid -eq $priority_pid ]; then
            priority_exit_code=$exit_status
          fi
        done

        exit $priority_exit_code
